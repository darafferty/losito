#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script that runs LoSiTo
"""
import os
import sys
import time
import logging
from losito import _version, _logging
from losito.obs import Observation
from losito.lib_operations import ParsetParser
import argparse


if __name__ == '__main__':
    # Options
    parser = argparse.ArgumentParser(description='losito - ')
    parser.add_argument('--version', action='version', version=_version.__version__)
    parser.add_argument('--quiet', '-q', dest='quiet', help='Quiet', default=False, action='store_true')
    parser.add_argument('--verbose', '-V', '-v', dest='verbose', help='Verbose', default=False, action='store_true')
    parser.add_argument('msfile', help='Input MS filename.', default=None, type=str)
    parser.add_argument('skymodel', help='Input sky model filename.', default=None, type=str)
    parser.add_argument('parset', help='LoSiTo parset.', nargs='?', default='losito.parset', type=str)
    args = parser.parse_args()

    if args.quiet:
        _logging.setLevel('warning')
    if args.verbose:
        _logging.setLevel('debug')

    # Check input MS and sky model
    if args.msfile is None:
        logging.error('No input MS file given.')
        sys.exit(1)
    if not os.path.isdir(args.msfile):
        logging.critical("Missing input MS file.")
        sys.exit(1)
    if args.skymodel is None:
        logging.error('No input sky model file given.')
        sys.exit(1)
    if not os.path.isfile(args.skymodel):
        logging.critical("Missing input sky model file.")
        sys.exit(1)
    obs = Observation(args.msfile, args.skymodel)

    # check parset
    if not os.path.isfile(args.parset):
        logging.critical("Missing parset file, I don't know what to do :'(")
        sys.exit(1)

    # read parset
    parser = ParsetParser(args.parset)
    steps = parser.sections()

    # Possible operations, linked to relative function
    import losito.operations as operations
    ops = {
           "TEC": operations.tec,
           "FARADAY": operations.faraday,
           "USE_H5": operations.use_h5,
           "CLOCK": operations.clock,
           "POLMISALIGN": operations.polmisalign,
           "BEAM": operations.beam,
           "PREDICT": operations.predict,
           "NOISE": operations.noise
          }

    globalstart = time.time()
    for step in steps:
        if step == '_global':
            continue  # skip global setting

        op = parser.getstr(step, 'Operation')
        if op not in ops:
            logging.error('Unkown operation: '+op)
            continue

        returncode = 0
        with operations.Timer(logging, step, op) as t:
            # run operation
            returncode += ops[op]._run_parser(obs, parser, step)
            if returncode != 0:
                logging.error("Step '{}' incomplete. Trying to continue anyway.".format(step))
            else:
                logging.info("Step '{}' completed successfully.".format(step))

    logging.info("Time for all steps: {} s.".format(int(time.time() - globalstart)))
    logging.info("Done.")
