#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
import logging, argparse, sys
import numpy as np
import casacore.tables as pt
import scipy.stats, scipy.integrate
import astropy.coordinates as apy
import random
import lsmtool
logging.basicConfig(level=logging.INFO)
from losito.lib_io import progress

def add_source(src, ref_freq, name, Jy = 1.0, s_idx = -.5, log_si='true',
               maj_axis=0.0, min_axis=0.0, pa=0.0, type='POINT'):
    '''Generate a sky model entry for a single source.

    Parameters
    ----------
    src : SkyCoord object
    name : str
        Source name.
    Jy : float, optional
        Source flux density in Jy. The default is 1.0.
    s_idx : float, optional
        Source spectral index. The default is -.5.
    log_si : str, optional
        Value to use for the 'LogarithmicSI' column of the sky model: true or false
    maj_axis : float, optional
        Major axis in arcsec (type = GAUSSIAN only)
    min_axis : float, optional
        Minor axis in arcsec (type = GAUSSIAN only)
    pa : float, optional
        Position angle in degrees (type = GAUSSIAN only)
    type : str, optional
        Source type: POINT or GAUSSIAN

    Returns
    -------
    add_opt : str
        Output string to be added to sky model.'''

    ra = '{:0>2.0f}:{:0>2.0f}:{:0>2.3f}'.format(*src.ra.hms)
    dec = '{:+.0f}.{:0>2.0f}.{:0>2.3f}'.format(*src.dec.dms)
    # add patch
    patch = 'patch_' + name
    add_opt = ' , , {}, {}, {}\n'.format(patch, ra, dec)
    # add source
    add_opt += '{}, {}, {}, {}, {}, {}, 0.0, 0.0, 0.0, '.format(name, type, patch, ra, dec, Jy)
    add_opt += '{}, {}, {}, {}, [{}], {}\n'.format(maj_axis, min_axis, pa, ref_freq, s_idx, log_si)
    return add_opt

def add_cross(phs_c, ref_freq, angle = 0.5):
    '''Add five sources to the sky model. One is located in the
    phase center, the others are spaced evenly around it.


    Parameters
    ----------
    phs_c : SkyCoord object
        Phase center of observation.
    ref_freq : float
        Reference frequency of the measurement.
    angle : float, optional
        Distance (degree) between the central and the four outer
        sources.
        The default is 0.5.

    Returns
    -------
    add_opt : str
        Output string to be added to sky model.'''

    # calculate ra, dec of cross
    ra_1 = (phs_c.ra.rad + np.arccos((np.cos(angle*np.pi/180) - np.sin(phs_c.dec.rad)**2)   / (np.cos(phs_c.dec.rad)**2)))
    ra_2 = (phs_c.ra.rad - np.arccos((np.cos(angle*np.pi/180) - np.sin(phs_c.dec.rad)**2)   / (np.cos(phs_c.dec.rad)**2)))
    dec_1 = phs_c.dec.rad + angle*np.pi/180
    dec_2 = phs_c.dec.rad - angle*np.pi/180
    # generate sources as SkyCoord objects
    tgt_1 = apy.SkyCoord(phs_c.ra.rad, dec_1, frame='icrs', unit='rad')
    tgt_2 = apy.SkyCoord(ra_1, phs_c.dec.rad, frame='icrs', unit='rad')
    tgt_3 = apy.SkyCoord(phs_c.ra.rad, dec_2, frame='icrs', unit='rad')
    tgt_4 = apy.SkyCoord(ra_2, phs_c.dec.rad, frame='icrs', unit='rad')
    # return sources properties as string
    add_opt = add_source(phs_c, ref_freq, 's1')
    add_opt += add_source(tgt_1, ref_freq, 's2')
    add_opt += add_source(tgt_2, ref_freq, 's3')
    add_opt += add_source(tgt_3, ref_freq, 's4')
    add_opt += add_source(tgt_4, ref_freq, 's5')

    return add_opt

def add_spiral(phs_c, ref_freq, max_angle = 0.5, npoints = 10):
    '''Add <npoints> sources to the sky model in a spiral centered
    around the observation phase center.
    Parameters
    ----------
    phs_c : SkyCoord object
        Phase center of observation.#
    ref_freq : float
            Reference frequency of the measurement.
    angle : float, optional
        Ra & dec distance in degree between the central and the
        outermost source.
        (Source is on diagonal, so actual distance has factor sqrt(2).)
        The default is 0.5.
    npoints: int, optional
        Number of sources to add. Default = 7

    Returns
    -------
    add_opt : str
        Output string to be added to sky model.'''
    # spiral-space points starting at [0, 0, 1]
    t_max = np.sin(np.deg2rad(max_angle))
    omega = 25.1*np.pi/(8*t_max)
    steps = np.linspace(0, t_max, num = npoints)
    pts = np.zeros((npoints, 3))
    for i, t in enumerate(steps):

        pts[i] = [t * np.cos(omega*t), t * np.sin(omega*t), np.sqrt(1-t**2)]

    # find rot. mat. that aligns [0,0,1] with phase center
    r = np.array([np.cos(phs_c.ra.rad)*np.cos(phs_c.dec.rad),
                  np.sin(phs_c.ra.rad)*np.cos(phs_c.dec.rad),
                  np.sin(phs_c.dec.rad)])
    e_z = np.array([0, 0, 1])
    v = np.cross(e_z, r)
    mat_V = np.array([[ 0,   -v[2], v[1]],
                      [ v[2], 0,   -v[0]],
                      [-v[1], v[0], 0  ]])
    mat_R =  np.identity(3) + mat_V
    mat_R += np.linalg.matrix_power(mat_V, 2) / (1+np.sqrt(1-(v**2).sum(-1)))

    # rotate the points and get ra, dec from cartesian
    ra, dec = np.zeros((2, npoints))
    for i, p in enumerate(pts):
        x, y, z = np.dot(mat_R, p)
        dec[i] = np.arcsin(z)
        ra[i] = np.arccos(x/np.cos(dec[i]))# case cos = 0

    # sources to SkyCoord, get string return
    sources = apy.SkyCoord(ra, dec, unit = 'rad')
    add_opt = add_source(sources[0], ref_freq, 's0')
    for i, src in enumerate(sources[1:]):
        add_opt += add_source(src, ref_freq, 's'+str(i+1))

    return add_opt

def add_tree(phs_c, ref_freq, scale = 1.):
    '''Add a chrsitmas tree to the sky model.
    Parameters
    ----------
    phs_c : SkyCoord object
        Phase center of observation.
    ref_freq : float, optional
        Reference frequency of the measurement.
    scale: angular scale of the tree
    Returns
    -------
    add_opt : str
    Output string to be added to sky model.'''
    a = float(1/3.6056)
    def steps(start, stop, dens = 1000):
        return np.linspace(start, stop, int(np.linalg.norm(stop-start)*dens))[0:-1]
    # Parametrize half of the tree and mirror it.
    path = np.array([[[0,  2*a], [-a/3,  a]],
                    [[-a/3,1*a], [-a/6,  a]],
                    [[-a/6,1*a], [-2*a/3,0]],
                    [[-2*a/3,0], [-a/2,  0]],
                    [[-a/2,  0], [-a   ,-a]],
                    [[-a,   -a], [0   , -a]],
                    [[-a/8, -a],[-a/8,-a*4/3]],
                    [[-a/8,-4*a/3],[0,-a*4/3]]])
    path *= np.tan(np.deg2rad(scale))

    path = np.concatenate([steps(step[0], step[1]) for step in path])
    path_r = path.copy()
    path_r[:,0] = - path_r[:,0]
    path = np.concatenate([path, path_r])

    # Add z-values = 1
    path = np.pad(path, (0,1))[:-1]
    path[:,2] = np.ones(len(path))

    # find rot. mat. that aligns [0,0,1] with phase center
    r = np.array([np.cos(phs_c.ra.rad)*np.cos(phs_c.dec.rad),
                  np.sin(phs_c.ra.rad)*np.cos(phs_c.dec.rad),
                  np.sin(phs_c.dec.rad)])
    e_z = np.array([0, 0, 1])
    v = np.cross(e_z, r)
    mat_V = np.array([[ 0,   -v[2], v[1]],
                      [ v[2], 0,   -v[0]],
                      [-v[1], v[0], 0  ]])
    mat_R =  np.identity(3) + mat_V
    mat_R += np.linalg.matrix_power(mat_V, 2) / (1+np.sqrt(1-(v**2).sum(-1)))

    # rotate the points and get ra, dec from cartesian
    ra, dec = np.zeros((2, len(path)))
    for i, p in enumerate(path):
        x, y, z = np.dot(mat_R, p)
        dec[i] = np.arcsin(z)
        ra[i] = np.arccos(x/np.cos(dec[i])) # care case cos = 0

    # sources to SkyCoord, get string return
    sources = apy.SkyCoord(ra, dec, unit = 'rad')
    add_opt = add_source(sources[0], ref_freq, 's0')
    for i, src in enumerate(sources[1:]):
        add_opt += add_source(src, ref_freq, 's'+str(i+1))

    return add_opt

class Windhorst_distribution(scipy.stats.rv_continuous):
    """
    This distribution (see Windhorst 1990) describes the distribution of the geometric mean of the
    angular extension of radio sources.
    This implementation is valid for a reference frequency of 150 MHz
    Parameters
    ----------
    max_theta: float, optional. Maximum extension in arcseconds.
    """

    def __init__(self, max_theta = 100., **kwargs):
        scipy.stats.rv_continuous.__init__(self,  **kwargs)
        self.max_theta = max_theta

    def _cdf(self, theta, S):
        """
        Cumulative density function.
        Parameters
        ----------
        theta: float, median source extension in arcseconds
        S: float, flux density at 150MHz in Jy

        Returns
        -------
        fraction: float, fraction of sources with an extension < theta
        """
        q = 0.62
        fraction_at_max_theta = 1 - np.exp(-np.log(2*(self.max_theta/self.theta_med(S))**q))
        fraction =  1 - np.exp(-np.log(2*(theta/self.theta_med(S))**q))
        if fraction < 0.: return 0.0
        else:
            if theta > self.max_theta:
                return 1.
            fraction /= fraction_at_max_theta  # normalize fraction to be 1 at theta=max_theta
            return fraction

    def theta_med(self, x):
        S_1400Mhz = 1000*x*(150/1400)**(0.7) # flux density in mJy at 1400MHz assuming SI of 0.7
        if S_1400Mhz < 4.5:
            return (3.5 - 1.5 * np.exp(-S_1400Mhz / 2)) * S_1400Mhz ** 0.3
        else:
            return (2.0 + 1.5 * np.exp(-S_1400Mhz / 200)) * S_1400Mhz ** 0.3

class Source_density_mandal2021(scipy.stats.rv_continuous):
    """
    Return number of sources per differential flux and solid angle interval using the fit from Mandal 2021.
    This implementation is valid for a reference frequency of 150 MHz.
    """

    def __init__(self, a, b, **kwargs):
        scipy.stats.rv_continuous.__init__(self, a=a, b=b, **kwargs)
        self.norm = scipy.integrate.quad(self._density, self.a, self.b)[0]

    def _density(self, x):
        coefficients = np.array([1.655, -0.1150, 0.2272, 0.51788, -0.449661, 0.160265, -0.028541, 0.002041])
        if 2.e-4 < x < 10:
            # factor 1000 from x-axis integration mJy to Jy
            return 1000 * x ** (-5 / 2) * np.sum(coefficients * np.log10(x * 1e3) ** np.arange(len(coefficients))) # sr-1 Jy-1
        else: return 0.0

    def _pdf(self, x):
        return self._density(x)/self.norm

def random_sample_ra_dec(center, max_angle_rad):
    """
    Sample a radius of max_angle_rad around a center given as sky coord.
    Nice way to do this would be to sample in polar coords...

    Parameters
    ----------
    center: SkyCoord
    max_angle_rad: float, radius within which samples are drawn

    Returns
    -------
    ra
    dec
    """
    try:
        del_ra = max_angle_rad / np.cos(phs_c.dec.rad)
    except ZeroDivisionError:
        del_ra = np.pi
    if del_ra > np.pi:
        del_ra = np.pi
    while True:
        ra = random.uniform(center.ra.rad - del_ra, center.ra.rad + del_ra)
        dec = random.uniform(center.dec.rad - max_angle_rad, center.dec.rad + max_angle_rad)
        dist = apy.angle_utilities.angular_separation(center.ra.rad, center.dec.rad, ra, dec)
        if dist < max_angle_rad:
            return ra, dec

def add_random_realistic(phs_c, max_angle, max_extension_arcsec=60., max_ell=0.5, min_flux_jy=0.1, min_s_idx=0.5,
                          max_s_idx=0.9, log_si='false'):
    """
    Create random sky model which obeys the source counts fom Mandal2021.
    The total number of sources in the sky model is given by the minimum flux and the radius.
    This function will sample the differential source count pdf of Mandal2021 down to the min flux.
    Parameters
    ----------
    phs_c: SkyCoord object
        phase center of observation
    max_angle: float,
        Radius in which to sample sources in degree.
    max_extension_arcsec: float, optional. Default = 60
        Maximum extension defined as max_extension_arcsec=sqrt(minor_ax*major_ax)
    max_ell: float, optional. Default =0.5
        Max eccentricity for Gaussian sources.
    min_flux_jy: float, optinal. Default = 0.1 Jy
        Minimum flux in Jy.
    Returns
    -------
    Returns
      -------
      add_opt : str
          Output string to be added to sky model.
    """
    area_sr = np.pi*max_angle**2/3283
    if min_flux_jy < 0.0002:
        logging.warning('No fluxes below 2e-4 Jy supported. Source count distribution uncertain.')
    distr_flux = Source_density_mandal2021(a=min_flux_jy, b=10)
    distr_angle = Windhorst_distribution(max_theta=max_extension_arcsec)
    n_src = area_sr * scipy.integrate.quad(distr_flux._density, min_flux_jy, 10)[0]
    n_src = int(n_src)
    if n_src < 1:
        raise ValueError(f'N_sources < 1. Please increase the radius or decrease the minimum flux density.')
    logging.info(f'Sampling {n_src} sources.')
    if n_src > 2000:
        logging.info(f'This may take a while. If you do not care about realistic distributions, '
                     f'you might want to use "--kind random" instead.')
    # flux_list = distr_flux.rvs(size=n_src)
    max_angle_rad = max_angle * np.pi / 180.0
    flux_list = []
    ra_list = []
    dec_list = []
    s_idx_list = []
    pa_list = []
    maj_list = []
    min_list = []
    type_list = []
    # Generate random RA and Dec, peak flux density, spectral index
    for i in range(n_src):
        progress(i, n_src, status='Creating radio sky...')
        ra, dec = random_sample_ra_dec(phs_c, max_angle_rad)
        ra_list.append(ra)
        dec_list.append(dec)
        flux = distr_flux.rvs()
        flux_list.append(flux)
        # Generate spectral index, assuming logarithmic polynomial:
        #   S = e^(log(S0) + s_idx * log(nu/refnu - 1))
        s_idx = random.uniform(min_s_idx, max_s_idx)
        s_idx_list.append(s_idx)
        if log_si == 'false':
            # Convert spectral index to approximate non-logarithmic polynomial if
            # log_si = 'false':
            #   S = S0 + s_idx * (nu/refnu - 1)
            # We use a Taylor series expansion of the logarithmic equation and keep just the
            # first two terms: S = S0 + s_idx * S0 * (nu/refnu - 1), so the new s_idx
            # becomes s_idx * S0
            s_idx *= flux
        s_idx_list.append(s_idx)
        # Set source size and shape
        extension_arcsec = distr_angle.rvs(flux)
        if extension_arcsec < 0.1:
            maj_list.append(0.0)
            min_list.append(0.0)
            pa_list.append(0.0)
            type_list.append('POINT')
        else:
            eccentricity = np.random.uniform(0.0, max_ell)
            maj_list.append(extension_arcsec/(1-eccentricity)**0.5)
            min_list.append(extension_arcsec*(1-eccentricity)**0.5)
            pa_list.append(random.uniform(0.0, 180.0))
            type_list.append('GAUSSIAN')
    # sources to SkyCoord, get string return
    sources = apy.SkyCoord(ra_list, dec_list, unit='rad')
    add_opt = ''
    for i, src in enumerate(sources):
        add_opt += add_source(src, 150.e6, 's'+str(i), Jy=flux_list[i],
                              s_idx=s_idx_list[i], log_si=log_si, maj_axis=maj_list[i],
                              min_axis=min_list[i], pa=pa_list[i], type=type_list[i])
    return add_opt



def add_random(phs_c, ref_freq, max_angle = 0.5, nptsrc=100, ngauss=100, min_flux_jy=0.1,
               max_flux_jy=5.0, min_maj_arcsec=5.0, max_maj_arcsec=100.0, max_ell=0.5,
               min_s_idx=-1.2, max_s_idx=-0.6, log_si='false'):
    """
    Creates sky model with randomly distributed sources

    Parameters
    ----------
    phs_c : SkyCoord object
        Phase center of observation.
    ref_freq : float, optional
        Reference frequency of the measurement.
    max_angle : float, optional
        Maximum distance in degrees from phase center within which sources are added
    nptsrc : int, optional
        Number of point sources to generate
    ngauss : int, optional
        Number of Gaussians to generate
    min_flux_jy : float, optional
        Minimum peak flux density in Jy of sources
    max_flux_jy : float, optional
        Maximum peak flux density in Jy of sources
    min_maj_arcsec : float, optional
        Minimum major axis in arcsec of Gaussian sources
    max_maj_arcsec : float, optional
        Maximum major axis in arcsec of Gaussian sources
    max_ell : float, optional
        Maximum ellipticity (1 - maj/min) of Gaussian sources (0 = circular Gaussian)
    min_s_idx : float, optional
        Minimum spectral index of sources
    max_s_idx : float, optional
        Maximum spectral index of sources
    log_si : str, optional
        Value to use for the 'LogarithmicSI' column of the sky model: 'true' or 'false'.
        If 'false', the spectral index is transformed to that appropriate for non-log
        polynomials

    Returns
    -------
    add_opt : str
        Output string to be added to sky model.
    """
    max_angle_rad = max_angle * np.pi / 180.0
    ra_list = []
    dec_list = []
    flux_list = []
    s_idx_list = []
    maj_list = []
    min_list = []
    pa_list = []
    type_list = []

    # Generate random RA and Dec, peak flux density, spectral index
    ntot = nptsrc + ngauss
    ra_list = []
    for i in range(ntot):
        ra, dec = random_sample_ra_dec(phs_c, max_angle_rad)
        ra_list.append(ra)
        dec_list.append(dec)

        # For peak flux density, use a Euclidean distribution (N ~ S^(-5/2)) to
        # better approximate the actual radio sky
        if min_flux_jy == max_flux_jy:
            flux_list.append(min_flux_jy)
        else:
            r = random.uniform(0, 1)
            flux = min(min_flux_jy * (1.0 - r)**(-1.0 / (5.0/2.0 - 1)), max_flux_jy)
            flux_list.append(flux)

        # Generate spectral index, assuming logarithmic polynomial:
        #   S = e^(log(S0) + s_idx * log(nu/refnu - 1))
        s_idx = random.uniform(min_s_idx, max_s_idx)
        if log_si == 'false':
            # Convert spectral index to approximate non-logarithmic polynomial if
            # log_si = 'false':
            #   S = S0 + s_idx * (nu/refnu - 1)
            # We use a Taylor series expansion of the logarithmic equation and keep just the
            # first two terms: S = S0 + s_idx * S0 * (nu/refnu - 1), so the new s_idx
            # becomes s_idx * S0
            s_idx *= flux
        s_idx_list.append(s_idx)

    # Set source size and shape
    for i in range(nptsrc):
        maj_list.append(0.0)
        min_list.append(0.0)
        pa_list.append(0.0)
        type_list.append('POINT')
    for i in range(ngauss):
        maj = random.uniform(min_maj_arcsec, max_maj_arcsec)
        ell = random.uniform(0.0, max_ell)
        maj_list.append(maj)
        min_list.append(maj*(1.0-ell))
        pa_list.append(random.uniform(0.0, 180.0))
        type_list.append('GAUSSIAN')

    # sources to SkyCoord, get string return
    sources = apy.SkyCoord(ra_list, dec_list, unit='rad')
    add_opt = ''
    for i, src in enumerate(sources):
        add_opt += add_source(src, ref_freq, 's'+str(i), Jy=flux_list[i],
                              s_idx=s_idx_list[i], log_si=log_si, maj_axis=maj_list[i],
                              min_axis=min_list[i], pa=pa_list[i], type=type_list[i])

    return add_opt

def add_catalogue(output_file, phs_c, ref_freq, angle = 4., minflux = 0.5):
    '''
    Create a skymodel from a catalouge. Every source will be assigned to
    an individual patch.

    Parameters
    ----------
    output_file : string
        Name of output sky model
    phs_c : SkyCoord object
        Phase center of MS
    ref_freq : float
        Reference frequency.
    angle : float, default = 3 
        Radius of the sky model sources
    minflux : float, default = 0.5
        Lower limit for sources to consider
    '''
    radeg = phs_c.ra.deg
    decdeg = phs_c.dec.deg
    os.system('wget -O {} "https://lcs165.lofar.eu/cgi-bin/gsmv1.cgi?coord={},{}&radius={}&unit=deg"'.format(output_file, radeg, decdeg, angle)) # ASTRON
    lsm = lsmtool.load(output_file)
    lsm.remove('I<{}'.format(minflux))
    lsm.group(algorithm='every', applyBeam=False)
    lsm.write(output_file, clobber=True)
                                                                                                
if __name__ == '__main__':
    # Options
    parser = argparse.ArgumentParser(description='skymodel - generate simple sky models')
    parser.add_argument('msfile', help='Input MS filename.', default= 'test.MS', type=str)
    parser.add_argument('--output', help='Ouput sky model filename.', default= 'mock.sky', type=str)
    parser.add_argument('--kind', help='Kind of sky model: cross, spiral, tree, random or cat.', default= 'cross', type=str)
    parser.add_argument('--radius', help='Radius in degrees within which sources are added.', default=2.0, type=float)
    parser.add_argument('--nptsrc', help='Number of point sources to generate.', default=10, type=int)
    parser.add_argument('--ngauss', help='Number of Gaussians to generate (kind=random, kind=random_realistic only).', default=10, type=int)
    parser.add_argument('--minflux', help='Minimum peak flux density in Jy (kind=random, kind=random_realistic only).', default=0.1, type=float)
    parser.add_argument('--maxflux', help='Maximum peak flux density in Jy (kind=random, kind=random_realistic only).', default=10.0, type=float)
    parser.add_argument('--minmaj', help='Minimum major axis in arcsec of Gaussian sources (only kind=random).', default=5.0, type=float)
    parser.add_argument('--maxmaj', help='Maximum major axis in arcsec of Gaussian sources (only kind=random).', default=30.0, type=float)
    parser.add_argument('--maxext', help='Maximum source extension (mean of minor and major axis) in arcsec (only kind=random_realistic).', default=30.0, type=float)
    parser.add_argument('--maxell', help='Maximum ellipticity (1 - maj/min) of Gaussian sources.', default=0.25, type=float)
    parser.add_argument('--minspidx', help='Minimum spectral index of sources (kind=random, kind=random_realistic only).', default=-1.2, type=float)
    parser.add_argument('--maxspidx', help='Maximum spectral index of sources (kind=random, kind=random_realistic only).', default=-0.6, type=float)
    parser.add_argument('--logsi', help='Value for LogarithmicSI: true or false (kind=random, kind=random_realistic only).', default='true', type=str)

    args = parser.parse_args()
    msfile = args.msfile
    tab = pt.table(msfile)
    logging.info('Create sky model for ' + msfile)

    phs_c = apy.SkyCoord(*tab.FIELD[0]['PHASE_DIR'][0], frame='icrs', unit='rad')
    ref_freq = tab.SPECTRAL_WINDOW[0]['REF_FREQUENCY']

    opt = 'format = Name, Type, Patch, Ra, Dec, I, Q, U, V, MajorAxis, '
    opt += 'MinorAxis, Orientation, ReferenceFrequency, '
    opt += 'SpectralIndex, LogarithmicSI\n'

    if args.kind == 'cross':
        opt += add_cross(phs_c, ref_freq)
    elif args.kind == 'spiral':
        opt += add_spiral(phs_c, ref_freq, max_angle=args.radius, npoints=args.nptsrc)
    elif args.kind == 'tree':
        opt += add_tree(phs_c, ref_freq, scale=args.radius)
    elif args.kind == 'random_realistic':
        opt += add_random_realistic(phs_c, max_angle=args.radius, max_extension_arcsec=args.maxext, max_ell= args.maxell,
                                     min_flux_jy=args.minflux, min_s_idx=args.minspidx, max_s_idx=args.maxspidx,
                                     log_si=args.logsi)
    elif args.kind == 'random':
        opt += add_random(phs_c, ref_freq, max_angle=args.radius, nptsrc=args.nptsrc,
                          ngauss=args.ngauss, min_flux_jy=args.minflux, max_flux_jy=args.maxflux,
                          min_maj_arcsec=args.minmaj, max_maj_arcsec=args.maxmaj, max_ell=args.maxell,
                          min_s_idx=args.minspidx, max_s_idx=args.maxspidx, log_si=args.logsi)
    elif args.kind == 'cat' or args.kind == 'catalogue':
        add_catalogue(args.output, phs_c, ref_freq, angle=args.radius, 
            minflux = args.minflux)
        logging.info('writing '+ args.output + ' from catalogue')
        sys.exit()
    else:
        logging.error(args.kind + ' is not a valid sky model kind.')
        sys.exit('Stop.')

    output_file = args.output
    logging.info('Output file: ' + output_file)
    with open(output_file, "w+") as f:
        f.write(opt)
        f.close()
