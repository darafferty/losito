#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
SYNTHMS - script. Use this script to generate measurement sets which containt
the metadata information necessary for a LoSiTo - simulation.

run the script:

./synthms --name a1033 --tobs 8 --ra 2.75570763 --dec 0.61219363 --lofarversion 1
"""
import argparse
import os
import sys
import pkg_resources

import casacore.tables as tab
import numpy as np
from astropy.coordinates import ITRS, SkyCoord
from astropy.time import Time
# Workaround for unavailable USNO server, both these mirrors work as May 2020
from astropy.utils import iers

from losito.lib_io import progress, logger

# iers.Conf.iers_auto_url.set('https://datacenter.iers.org/data/9/finals2000A.all')
iers.Conf.iers_auto_url.set('ftp://cddis.gsfc.nasa.gov/pub/products/iers/finals2000A.all')

def timestamp(mjds):
    jd = Time(mjds / (3600. * 24.), format='mjd')
    year = jd.to_datetime().year
    month = jd.to_datetime().month
    day = jd.to_datetime().day
    hour = jd.to_datetime().hour
    min = jd.to_datetime().minute
    return '{}{:02d}{:02d}{:02d}{:02d}'.format(year, month, day, hour, min)


def putcol_subtable(table, subtable, colname, val):
    ''' Workaround to put an array value in a subtable.
    Problems when using taql include weird write protected sub tables and
    array shape mismatches.
    Parameters
    ----------
    table : table-object
    subtable : string, name of the substable to put column in
    colame : string, name of the column
    val : array or other, value to put in. Shapes must match.
    '''
    st = tab.table(table.name()+'::'+ subtable, readonly = False, ack = False)
    st.putcol(colname, val)
    st.done()


def get_sb_spectral_window(sb, stationtype):
    ''' Return informatio of the SPECTRAL_WINDOW sub table for a certain
    subband. Each subbband has 4 frequency channels.
    Parameters
    ----------
    sb : int,
    stationtype : str, 'LBA' or 'HBA

    Returns
    -------
    f : (4,) ndarray, frequency of the 4 subband channels.
    ref_freq : float, reference frequency of this subband.
    '''
    if sb < 150 or sb > 393:
        logger.error('SB{} is not a viable frequency band. Frequency bands'
                      'are from 150 to 393.')
    d_freq = 48828.125
    if stationtype == 'LBA':
        lowest_freq =  29222106.93359375
    elif stationtype == 'HBA':
        lowest_freq = 120237731.93359375
    else:
        logger.error('Stationtype '+ stationtype +' not understood. Select' 
                      'either LBA or HBA')
    f = lowest_freq + d_freq * (np.arange(4) + (sb - 150) * 4)
    return f, np.mean(f)


def make_copy_change_frequency(inputms, outputsb, outputname, stationtype):
    """  Copy the measurement set of a subband and change the SPECTRAL_WINDOW.
    Parameters
    ----------
    inputms : table-object
        Measurement set to copy.
    outputsb: int
        Frequency sub band of the output MS.
    outputname : string
        Name of the output MS.
    """
    outtab = inputms.copy(outputname, deep=True)
    f, ref_freq = get_sb_spectral_window(outputsb, stationtype)
    tab.taql('''UPDATE $outtab::SPECTRAL_WINDOW SET CHAN_FREQ=$f, REF_FREQUENCY=$ref_freq''')
    outtab.close()


def make_minsb(name, start, tobs, ra, dec, stationtype, lofarversion,
               minsb=150):
    '''Generate a measurement set for the lowest frequency sub-band.
    One subband contains four frequency channels.

    Parameters
    name : string
        Name of the simulated target field
    start : float
        Start time of the observation in MJD seconds.
    tobs : float
        Length of the observation in hours.
    ra : float
        Target RA in rad
    dec : float
        Target dec in rad
    lofarversion : int
        For which hardware development version to create the ms. Either 1 or 2.
    stationtype : string
        Either LBA or HBA.
    ----------
    '''
    # Load template table
    template_dir = str(pkg_resources.resource_filename('losito', 'data/ms_templates/'))
    if stationtype.lower() == 'lba':
        if lofarversion == 1:
            logger.info('Creating LOFAR 1 MS')
            template_name = template_dir+'LBA_LOFAR1.MS'
        elif lofarversion == 2:
            logger.info('Creating LOFAR 2.0 MS')
            template_name = template_dir+'LBA_LOFAR2.MS'
    elif stationtype.lower() == 'hba':
        template_name = template_dir + 'HBA_LOFAR.MS'
    else:
        raise ValueError('Stationtype '+stationtype+' unknown. Select LBA or HBA.')
    template = tab.table(template_name, readonly=True, memorytable=True, ack=False)

    # Get times & pointing ready
    ntimes = int((3600 * tobs) // 4.00556032 + 1) # 4s exposure
    end =  start + (ntimes - 1) * 4.00556032 # endtime
    times = np.linspace(start, end,  ntimes)

    time_centroid = (start + end) / 2
    p = np.array([[ra, dec]])
    f, ref_freq = get_sb_spectral_window(minsb, stationtype)
    msname = '{}_t{}_SB{}{}.MS'.format(name, timestamp(start), stationtype[0],
                                       minsb)
    sbname = 'SB-'+str(minsb)
    n_stations = len(tab.table(template_name+'::ANTENNA', readonly=True, ack=False, memorytable=True))
    n_bl = len(template)
    # UVW values
    sp = tab.table(template_name+'::LOFAR_ANTENNA_FIELD', readonly=True, ack=False, memorytable=True).getcol('POSITION')
    ant1, ant2 = template.getcol('ANTENNA1'), template.getcol('ANTENNA2')
    def _get_uvw(_time):
        """ Get the ICRS UVW values for all baselines at a certain time. """
        itrs = ITRS(obstime=Time(_time / (3600 * 24), format='mjd'))
        sp_itrs = SkyCoord(x=sp[:, 0], y=sp[:, 1], z=sp[:, 2], frame=itrs,
                           unit='meter')
        sp_icrs = sp_itrs.transform_to("icrs")
        sp_ant1 = np.take(sp_icrs.cartesian.xyz, ant1, axis=1).T
        sp_ant2 = np.take(sp_icrs.cartesian.xyz, ant2, axis=1).T
        _uvw = sp_ant2 - sp_ant1 # defined as 2 - 1
        # Transform such that W parallel to s, U in Ra-dir, V in dec-dir
        s = SkyCoord(ra=p[0,0], dec=p[0,1], unit='rad').cartesian.xyz
        def rotmatrix_from_vec(a, b):
            """ Return rot. matrix which rotates vector a to vector b."""
            v = np.cross(a, b)
            skew = np.array([[0, -v[2], v[1]],
                             [v[2], 0, -v[0]],
                             [-v[1], v[0], 0]])
            R = np.identity(3) + skew + skew @ skew /(1 + np.dot(a, b))
            return R
        R1 = rotmatrix_from_vec(s, [0,0,1])
        R2 = rotmatrix_from_vec([-np.sin(p[0,0]), np.cos(p[0,0]), 0], [1,0,0])
        # first transform such that source direction align with W a.k.a. Z axis
        # Then rotate such that unit vector in "RA" direction matches U/X
        _uvw = np.einsum('ijk, ik -> ij', (R2 @ R1)[np.newaxis],_uvw)
        return _uvw

    uvw = np.zeros((ntimes * n_bl, 3))
    uvw[0:n_bl] = _get_uvw(start)
    # MAIN TABLE
    out_ms = template.copy(msname, deep = True, valuecopy=True)
    tab.taql('UPDATE $out_ms SET TIME=$start, TIME_CENTROID=$start')
    logger.info('Expand in time')
    for i, t in enumerate(times[1::]):
        progress(i, len(times)-1, status = 'Make first SB')
        tab.taql('INSERT INTO $out_ms SELECT FROM $template')
        offset = (i+1) * n_bl
        uvw[offset:offset+n_bl] = _get_uvw(t)
        tab.taql('UPDATE $out_ms SET TIME=$t, TIME_CENTROID=$t OFFSET $offset')
    template.close()
    out_ms.putcol('UVW', uvw)
    # SUBTABLES
    # ::SPECTRAL_WINDOW
    tab.taql('UPDATE $out_ms::SPECTRAL_WINDOW SET CHAN_FREQ=$f, REF_FREQUENCY=$ref_freq, NAME=$name')
    # ::FEED
    tab.taql('UPDATE $out_ms::FEED SET TIME=$time_centroid')
    # ::POINTING
    tab.taql('UPDATE $out_ms::POINTING SET NAME=$name, TIME=$time_centroid, TIME_ORIGIN=$start-2')
    # putcol_subtable function is workaround for setting arrays columns
    putcol_subtable(out_ms, 'POINTING', 'TARGET', np.tile(p, (n_stations, 1, 1)))
    putcol_subtable(out_ms, 'POINTING', 'DIRECTION', np.tile(p, (n_stations, 1, 1)))
    # ::FIELD
    tab.taql('UPDATE $out_ms::FIELD SET CODE=$name, TIME=$start-2')
    putcol_subtable(out_ms, 'FIELD', 'REFERENCE_DIR', p[np.newaxis])
    putcol_subtable(out_ms, 'FIELD', 'PHASE_DIR', p[np.newaxis])
    putcol_subtable(out_ms, 'FIELD', 'LOFAR_TILE_BEAM_DIR', p[np.newaxis])
    putcol_subtable(out_ms, 'FIELD', 'DELAY_DIR', p[np.newaxis])
    # ::OBSERVATION
    tab.taql('''UPDATE $out_ms::OBSERVATION SET LOFAR_TARGET=$name, LOFAR_OBSERVATION_START=$start-2,
                LOFAR_OBSERVATION_END=$end+2, LOFAR_FILEDATE=$start-3''')
    # ::ORIGIN
    origin = 'LOSITO - THE LOFAR SIMULATION TOOL. THIS MEASUREMENT SET WAS CREATED BY THE SYNTHMS SCRIPT'
    # ::HISTORY
    tab.taql('UPDATE $out_ms::HISTORY SET ORIGIN=$origin, TIME=$start-70')
    return out_ms


if __name__ == '__main__':
    # Options
    parser = argparse.ArgumentParser(description='synthms - synthesize input ms files')
    parser.add_argument('--name', help='MS file prefix', default='sim', type=str)
    parser.add_argument('--start', help='Start of observation in MJD seconds', default=5037073202.00278, type=float)
    parser.add_argument('--tobs', help='Observation time in hours.', default=8.0, type=float)
    parser.add_argument('--ra', help='Target right ascension in rad', default=2.75570763, type=float)
    parser.add_argument('--dec', help='Target declination in rad', default=0.61219363, type=float)
    parser.add_argument('--station', help='>LBA<, >HBA< or >both<', default='both', type = str)
    parser.add_argument('--lofarversion', help='>1< for the current instrument, >2< for LOFAR2.0', default=2, type=int)
    parser.add_argument('--minsb', help='Lowest sub band, >= 150', default=150, type=int)
    parser.add_argument('--maxsb', help='Highest sub band', default=393, type=int)

    # Parse parset
    args = parser.parse_args()
    name = args.name
    start = args.start
    tobs = args.tobs
    ra = args.ra
    dec = args.dec
    lofarversion = args.lofarversion
    minsb, maxsb = args.minsb, args.maxsb

    if lofarversion not in [1,2]:
        logger.error('Invalid value for option lofarversion. Select 1 or 2.')
        sys.exit(1)

    if args.station not in ['LBA', 'HBA', 'both']:
        logger.error('Stationtype ' + args.station + ' unknown. Select LBA or HBA.')

    # Make LBA MSs
    if args.station == 'LBA' or args.station == 'both':
        logger.info('Start synthesizing measurement sets for LBA')
        # Make lowest freq. subband from template
        min_sbl = make_minsb(name, start, tobs, ra, dec, 'LBA', lofarversion,
                             minsb=minsb)
        _name = min_sbl.name() # close and reopen: workaround for some versions of tables...
        min_sbl.close()
        min_sbl = tab.table(_name, ack=False)
        # Get other subbands from first sb
        logger.info('Expand in frequency')
        for sb in range(minsb+1, maxsb+1):
            progress(sb-minsb, maxsb-minsb, status='Make LBA SB {}'.format(sb))
            output_name = '{}_t{}_SBL{}.MS'.format(name, timestamp(start), sb)
            make_copy_change_frequency(min_sbl, sb, output_name, 'LBA')
        min_sbl.close()

    # Make HBA MSs
    if args.station == 'HBA' or args.station == 'both':
        logger.info('Start synthesizing measurement sets for HBA')
        # Make lowest freq. subband from template
        min_sbh = make_minsb(name, start, tobs, ra, dec, 'HBA', lofarversion,
                             minsb=minsb)
        _name = min_sbh.name() # close and reopen: workaround for some versions of tables...
        min_sbh.close()
        min_sbh = tab.table(_name, ack=False)
        # Get other subbands from first sb
        logger.info('Expand in frequency')
        for sb in range(minsb+1, maxsb + 1):
            progress(sb-minsb, maxsb-minsb, status='Make HBA SB {}'.format(sb))
            output_name = '{}_t{}_SBH{}.MS'.format(name, timestamp(start), sb)
            make_copy_change_frequency(min_sbh, sb, output_name, 'HBA')
        min_sbh.close()
