#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
import logging, argparse, sys
import numpy as np
from astropy.time import Time
import casacore.tables as tab
from losito.progress import progress

mod_dir = os.path.dirname(os.path.abspath(__file__))
template_dir = mod_dir + '/../data/ms_templates/'

def timestamp(mjds):
    jd = Time(mjds / (3600. * 24.), format='mjd')
    year = jd.to_datetime().year
    month = jd.to_datetime().month
    day = jd.to_datetime().day
    hour = jd.to_datetime().hour
    min = jd.to_datetime().minute
    return '{}{:02d}{:02d}{:02d}{:02d}'.format(year, month, day, hour, min)


def putcol_subtable(table, subtable, colname, val):
    ''' Workaround to put an array value in a subtable.
    Problems when using taql include weird write protected sub tables and
    array shape mismatches.
    Parameters
    ----------
    table : table-object
    subtable : string, name of the substable to put column in
    colame : string, name of the column
    val : array or other, value to put in. Shapes must match.
    '''
    st = tab.table(table.name()+'::'+ subtable, readonly = False, ack = False)
    st.putcol(colname, val)
    st.done()


def get_sb_spectral_window(sb, stationtype):
    ''' Return informatio of the SPECTRAL_WINDOW sub table for a certain
    subband. Each subbband has 4 frequency channels.
    Parameters
    ----------
    sb : int,
    stationtype : str, 'LBA' or 'HBA

    Returns
    -------
    f : (4,) ndarray, frequency of the 4 subband channels.
    ref_freq : float, reference frequency of this subband.
    '''
    if sb < 150 or sb > 393:
        logging.error('SB{} is not a viable frequency band. Frequency bands'
                      'are from 150 to 393.')
    d_freq = 48828.125
    if stationtype == 'LBA':
        lowest_freq =  29_222_106.93359375
    elif stationtype == 'HBA':
        lowest_freq = 120_237_731.93359375
    else:
        logging.error('Stationtype '+ stationtype +' not understood. Select' 
                      'either LBA or HBA')
    f = lowest_freq  + d_freq * (np.arange(4) + (sb - 150) * 4)
    return f, np.mean(f)


def make_copy_change_frequency(inputms, outputsb, outputname, stationtype):
    """  Copy the measurement set of a subband and change the SPECTRAL_WINDOW.
    Parameters
    ----------
    inputms : table-object
        Measurement set to copy.
    outputsb: int
        Frequency sub band of the output MS.
    outputname : string
        Name of the output MS.
    """
    outtab = inputms.copy(outputname, deep = True)
    f, ref_freq = get_sb_spectral_window(outputsb, stationtype)
    tab.taql('''UPDATE $outtab::SPECTRAL_WINDOW SET CHAN_FREQ=$f, REF_FREQUENCY=$ref_freq''')
    outtab.close()


def make_sb150(name, start, tobs, ra, dec, stationtype):
    '''Generate a measurement set for the lowest frequency sub-band.
    One subband contains four frequency channels.

    Parameters
    name : string
        Name of the simulated target field
    start : float
        Start time of the observation in MJD seconds.
    tobs : float
        Length of the observation in hours.
    ra : float
        Target RA in rad
    dec : float
        Target dec in rad
    stationtype : string
        Either LBA or HBA.
    ----------'''
    sb = 150 # Make for SB 150
    # Load template table
    if stationtype == 'LBA':
        template = tab.table(template_dir+'LBA_LOFAR2.MS', readonly=True,
                             memorytable=True, ack=False)
    elif stationtype == 'HBA':
        template = tab.table(template_dir+'HBA_LOFAR2.MS', readonly=True,
                             memorytable=True, ack=False)
    else:
        logging.error('Stationtype '+stationtype+' unknown. Select LBA or HBA.')

    # Get times & pointing ready
    times = np.arange(start, start + 3600 * tobs, 4.00556032) # 4s exposure
    end = start + 3600 * tobs
    p = np.array([[ra, dec]])
    f, ref_freq = get_sb_spectral_window(sb, stationtype)
    msname = '{}_t{}_SB{}{}.MS'.format(name, timestamp(start), stationtype[0], sb)
    sbname = 'SB-'+str(sb)
    n_stations = len(template.ANTENNA)
    # MAIN TABLE
    out_ms = template.copy(msname, deep = True, valuecopy=True)
    logging.info('Expand in time')
    for i, t in enumerate(times):
        progress(i, len(times), status = 'Make first SB')
        tab.taql('INSERT INTO $out_ms SELECT FROM $template')
        offset = i*len(template)
        tab.taql('UPDATE $out_ms SET TIME=$t, TIME_CENTROID=$t OFFSET $offset')
    template.close()

    # SUBTABLES
    # ::SPECTRAL_WINDOW
    tab.taql('UPDATE $out_ms::SPECTRAL_WINDOW SET CHAN_FREQ=$f, REF_FREQUENCY=$ref_freq, NAME=$name')
    # ::FEED
    tab.taql('UPDATE $out_ms::FEED SET TIME=$start')
    # ::POINTING
    tab.taql('UPDATE $out_ms::POINTING SET NAME=$name, TIME=$end, TIME_ORIGIN=$start')
    # putcol_subtable function is workaround for setting arrays columns
    putcol_subtable(out_ms, 'POINTING', 'TARGET', np.tile(p, (n_stations, 1, 1)))
    putcol_subtable(out_ms, 'POINTING', 'DIRECTION', np.tile(p, (n_stations, 1, 1)))
    # ::FIELD
    tab.taql('UPDATE $out_ms::FIELD SET CODE=$name, TIME=$start')
    putcol_subtable(out_ms, 'FIELD', 'REFERENCE_DIR', p[np.newaxis])
    putcol_subtable(out_ms, 'FIELD', 'PHASE_DIR', p[np.newaxis])
    putcol_subtable(out_ms, 'FIELD', 'LOFAR_TILE_BEAM_DIR', p[np.newaxis])
    putcol_subtable(out_ms, 'FIELD', 'DELAY_DIR', p[np.newaxis])
    # ::OBSERVATION
    tab.taql('''UPDATE $out_ms::OBSERVATION SET LOFAR_TARGET=$name, LOFAR_OBSERVATION_START=$start,
                LOFAR_OBSERVATION_END=$end''')
    # ::ORIGIN
    origin = 'LOSITO - THE LOFAR SIMULATION TOOL. THIS MEASUREMENT SET WAS CREATED BY THE SYNTHMS SCRIPT'
    # ::HISTORY
    tab.taql('UPDATE $out_ms::HISTORY SET ORIGIN=$origin, TIME=$start')
    out_ms.close()


if __name__ == '__main__':
    # Options
    parser = argparse.ArgumentParser(description='synthms - synthesize input ms files')
    parser.add_argument('--name', help='MS file prefix', default='abell1033', type=str)
    parser.add_argument('--start', help='Start of observation in MJD seconds', default=5037073202.00278, type=float)
    parser.add_argument('--tobs', help='Observation time in hours.', default=8.0, type=float)
    parser.add_argument('--ra', help='Target right ascension in rad', default=2.75570763, type=float)
    parser.add_argument('--dec', help='Target declination in rad', default=0.61219363, type=float)
    parser.add_argument('--station', help='>LBA<, >HBA< or >both<', default='both', type = str)
    parser.add_argument('--lofarversion', help='LOFAR1 or LOFAR2', default='LOFAR2', type=str)
    # Parse parset
    args = parser.parse_args()
    name = args.name
    start = args.start
    tobs = args.tobs
    ra = args.ra
    dec = args.dec

    if args.lofarversion != 'LOFAR2':
        logging.error('Cuurrently, only LOFAR2 is supported in synthms')
        sys.exit(1)

    # Make LBA MSs
    if args.station == 'LBA' or args.station == 'both':
        logging.info('Start synthesizing measurement sets for LBA')
        make_sb150(name, start, tobs, ra, dec, 'LBA')
        msname_sbl150 = '{}_t{}_SBL{}.MS'.format(name, timestamp(start), 150)
        sbl150 = tab.table(msname_sbl150, readonly=True, ack = True)
        logging.info('Expand in frequency')
        for sb in range(151,394):
            progress(sb-151, 243, status='Make SB {}'.format(sb))
            output_name = '{}_t{}_SBL{}.MS'.format(name, timestamp(start), sb)
            make_copy_change_frequency(sbl150, sb, output_name, 'LBA')
        sbl150.close()

    # Make HBA MSs
    if args.station == 'HBA' or args.station == 'both':
        logging.info('Start synthesizing measurement sets for HBA')
        make_sb150(name, start, tobs, ra, dec, 'HBA')
        msname_sbh150 = '{}_t{}_SBH{}.MS'.format(name, timestamp(start), 150)
        sbh150 = tab.table(msname_sbh150, readonly=True, ack = True)
        logging.info('Expand in frequency')
        for sb in range(151,394):
            progress(sb-151, 243, status='Make SB {}'.format(sb))
            output_name = '{}_t{}_SBH{}.MS'.format(name, timestamp(start), sb)
            make_copy_change_frequency(sbh150, sb, output_name, 'HBA')
        sbh150.close()

    logging.info('finished')




