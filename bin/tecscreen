#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Script that creates simulated time-dependant dTEC FITS screens based on a 2D-polynomial
with sinusoidally varying coefficients

Based on original version written by Peter Dorman, 2019.
"""
import numpy as np
import math
import argparse
from astropy.io import fits as pyfits
from losito.obs import Observation
from losito.lib_operations import make_template_image


def create_images(ntimes, polygrade, pixels, seed, coeffs, pos, max_dtec):
    """
    Creates simulated time-dependant dTEC screens

    Parameters
    ----------
    TODO

    Returns
    -------
    TODO
    """
    # Create Values for coefficients of polynomials
    np.random.seed(int(seed))
    value = coeffs + math.pi * 2 * (np.random.rand(polygrade, polygrade))

    # Scale coefficients to values between -1 and 1
    ai = np.sin(value)

    # generate 2 2d grids for the x & y bounds
    scrvar = 1.0
    y, x = np.meshgrid(np.linspace(-scrvar, scrvar, pixels), np.linspace(-scrvar, scrvar, pixels))

    # Output of this function is saved in outputlist
    data = np.zeros((ntimes, pixels, pixels))
    for i in range(ntimes):
        # Calculate polynomial
        z = np.polynomial.polynomial.polyval2d(x, y, ai)

        # Centre polynomial to given coordinates; Rescale to realistic dTec values
        z = z-np.polynomial.polynomial.polyval2d(0, 0, ai)
        if abs(z.min()) > abs(z.max()):
            z = np.interp(z, (z.min(), -z.min()), (-max_dtec, max_dtec))
        else:
            z = np.interp(z, (-z.max(), z.max()), (-max_dtec, max_dtec))

        # Adding values for the next step
        value += ((np.random.rand(polygrade, polygrade))-1) * 0.05
        ai = np.sin(value)

        data[i, :, :] = z

    return data


def check_positive(uvalue):
    """
    Checks if values of arguments are positive

    Parameters
    ----------
    TODO

    Returns
    -------
    TODO
    """
    ivalue = int(uvalue)
    if ivalue <= 0:
        raise argparse.ArgumentTypeError("%s is an invalid positive int value" % uvalue)
    return ivalue


def coeff_map(antpos, seed, polygrade):
    """
    Calculates coefficients

    Every Coefficient has its own gradient map of Ax+By to create spatial coherency.
    Coefficients have random values between -1 and 1.

    Parameters
    ----------
    TODO

    Returns
    -------
    TODO
    """
    A, B = np.empty(polygrade**2), np.empty(polygrade**2)

    for coeff in range(polygrade**2):
        seed = int(seed*1.01)
        np.random.seed(seed)
        A[coeff] = np.random.rand()*2 - 1

        seed = int(seed+1)
        np.random.seed(seed)
        B[coeff] = np.random.rand()*2 - 1

    Coeffs = np.empty(((len(antpos)), polygrade**2))

    for i in range(len(antpos)):
        Coeffs[i, :] = A * float(antpos[i][0]) + B * float(antpos[i][1])

    if Coeffs.any():
        Coeffs = Coeffs / Coeffs.max()

    return Coeffs


if __name__ == '__main__':
    # Options
    parser = argparse.ArgumentParser()
    parser.add_argument('msfile', help='Input MS filename.', type=str, default=None)
    parser.add_argument("fitsfile", help="Output FITS fileneam", type=str, default=None)
    parser.add_argument("--polygrade", help="define grade of polynomial", type=check_positive, default=3)
    parser.add_argument("--npixels", help="number of screen pixels", type=check_positive, default=100)
    parser.add_argument("--size", help="width of screen in degrees", type=float, default=None)
    parser.add_argument("--vid", help="toggle video output", type=bool, default=False)
    parser.add_argument("--fits", help="toggle fits output", type=bool, default=True)
    parser.add_argument("--seed", help="define random seed", type=int, default=None)
    parser.add_argument("--maxdtec", help="maximum dTEC value in screen", type=float, default=1.0)
    args = parser.parse_args()

    if args.seed is None:
        args.seed = round(np.random.rand()*1000)
        print("Using random Seed Nr. = " + str(args.seed))

    # Make obs object and get station positions (in m), times, and freqs
    obs = Observation(args.msfile)
    stationpositions = obs.stationpositions
    times = obs.get_times()
    freqs = obs.get_frequencies()

    # Map station locations to x-y grid defined in 1-km cells
    min_xpos = min([sp[0] for sp in stationpositions])
    min_ypos = min([sp[1] for sp in stationpositions])
    antpos = [((sp[0]-min_xpos)/1000.0, (sp[1]-min_ypos)/1000.0) for sp in stationpositions]

    # Before creating the TEC-screens the coefficients for the polynomials are defined,
    # based on antenna positions (Nearby antennas = similar coefficients)
    coeffs = coeff_map(antpos, args.seed, args.polygrade)

    # Make blank output FITS file
    if args.size is None:
        size_deg = obs.fwhm_deg * 2.0
    else:
        size_deg = args.size
    cellsize_deg = size_deg / args.npixels
    make_template_image(args.fitsfile, obs.ra, obs.dec, ximsize=args.npixels,
                        yimsize=args.npixels, cellsize_deg=cellsize_deg, freqs=[freqs[0]],
                        times=times, antennas=obs.stations, aterm_type='tec')
    hdu = pyfits.open(args.fitsfile, memmap=False)
    data = hdu[0].data

    # Calculate TEC screens, referencing them to the first station
    for i in range(obs.numstations):
        c = coeffs[i, :]
        c = np.reshape(c, (args.polygrade, args.polygrade))
        data[:, 0, i, :, :] = create_images(obs.numsamples, args.polygrade, args.npixels,
                                            args.seed, c, i, args.maxdtec)
        if i > 0:
            data[:, :, i, :, :] -= data[:, :, 0, :, :]
    data[:, :, 0, :, :] = 0.0

    # Write out screens
    hdu[0].data = data
    hdu.writeto(args.fitsfile, overwrite=True)
